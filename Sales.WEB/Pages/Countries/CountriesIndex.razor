@page "/countries"
@inject IRepository repository;
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<h3>Paises</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary" href="/countries/create">Nuevo País</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>



<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAync"/>



<GenericList MyList="Countries">
@*    <Loading>
        <p>Si le queremos enviar nuestro popio Loading</p>
    </Loading>*@
    <Body>
        <table class="table table-striped">
        <thead>
            <tr>
                <th>País</th>
                <th style="width:220px">Estados / Departamentos</th>
                <th style="width:260px"></th>
            </tr>
        </thead>
        <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            @country.Name
                        </td>
                        <td>@country.StatesNumber</td>
                        <td>
                                <a class="btn btn-info" href="/countries/details/@country.Id">Detalles</a>
                            <a class="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(()=>DeleteAsync(country.Id))>Borrar</button>
                        </td>
                    </tr>
                }
        </tbody>
        </table>
    </Body>
</GenericList>

@code {

    public List<Country>? Countries { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = String.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = String.Empty;



    //Cuando la página se recarga hay una propiedad que se ejecuta y esa es:
    protected override async Task OnInitializedAsync()
    {
       await LoadAsync();

    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"/api/countries?page={page}";
            url2 = $"/api/countries/totalPages";
        }
        else
        {
            url1 = $"/api/countries?page={page}&filter={Filter}";
            url2 = $"/api/countries/totalPages?filter={Filter}";
        }


        var responseHttp = await repository.Get<List<Country>>(url1);
        var responseHttp2 = await repository.Get<int>(url2);
        Countries = responseHttp.Response!;
        totalPages = responseHttp2.Response!;

    }

    private async Task SelectedPageAync(int page)
    {
        currentPage = page;
        await LoadAsync(page);

    }


    private async Task DeleteAsync(int Id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente Deseas Eliminar el Registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
            });

        var confirm = String.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }
        else
        {
            var responseHttp = await repository.Delete($"/api/countries/{Id}");
            if (responseHttp.Error)
            {
                if(responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
                {
                    var message = await responseHttp.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                    return;
                }
            }
            await LoadAsync();

        }
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAync(page);
    }

}


