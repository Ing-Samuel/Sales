@page "/states"
@inject IRepository repository;
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Estados</h3>
<a class="btn btn-primary mb-3" href="/countries/create">Nuevo Estado</a>

<GenericList MyList="Countries">
    @*    <Loading>
    <p>Si le queremos enviar nuestro popio Loading</p>
    </Loading>*@
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>País</th>
                    <th>Estados / Departamentos</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            @country.Name
                        </td>
                        <td>@country.StatesNumber</td>
                        <td>
                            <a class="btn btn-info" href="/countries/details/@country.Id">Detalles</a>
                            <a class="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(()=>DeleteAsync(country.Id))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {

    public List<Country>? Countries { get; set; }



    //Cuando la página se recarga hay una propiedad que se ejecuta y esa es:
    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();

    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/countries");
        Countries = responseHttp.Response;
    }

    private async Task DeleteAsync(int Id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente Deseas Eliminar el Registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
            });

        var confirm = String.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }
        else
        {
            var responseHttp = await repository.Delete($"/api/countries/{Id}");
            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
                {
                    var message = await responseHttp.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                    return;
                }
            }
            await LoadAsync();

        }
    }
}



