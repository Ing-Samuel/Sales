@page "/states/edit/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Editar Estado</h3>

@if (state is null)
{
    <p>Cargando...</p>
}
else
{
    <StateForm @ref="stateForm" state="state" OnValidSubmit="EditAsync" ReturnAction="Return"></StateForm>
}

@code {
    private StateForm? stateForm;
    private State? state;
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<State>($"/api/states/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/states");
                return;
            }
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        state = responseHttp.Response;

    }
    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/states", state);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Errror", message, SweetAlertIcon.Error);
            return;
        }
        Return();
    }

    private void Return()
    {
        stateForm!.FormPostedSuccesfully = true;
        navigationManager.NavigateTo("/states");
    }

}
